1.栈的应用
栈的应用主要有两个方面：1.表达式求值;2.递归实现
1.1 表达式求值
在计算机领域，常用两种方式来表达算术表达式。
**第一种为中缀表达式，用算术运算符和括号把运算对象连接起来，
双目运算符位于两个运算对象之间，即为我们常用的表达式，如(a+b)*c。
**第二种为后缀表达式，也称为逆波兰表达式，
把运算符放在参与运算的两个运算对象之后，如ab+c*
**可以采用如下规则把中缀表达式转化为后缀表达式
（1）把中缀表达式中的所有运算符置于它的两个运算对象之后
（2）去掉表达式中的所有括号
**计算中缀表达式时，需要确定各运算符的优先级，先计算优先级高的运算符。
对于相同优先级的运算符，按照从左到右的顺序计算。常用运算符的优先级如下所示
*************************************
运算符	(	*	/	+	-	)	#
*************************************
优先级	4	3	3	2	2	1	0
*************************************	
***********优先级从高到低************
**在计算中缀表达式时，需要设置两个栈：一个用于存储操作数，称为操作数栈，记作OPND;
一个用于存储操作符，称为操作符栈，记作OPRT
初始时，操作数栈OPND为空，操作符栈的栈顶元素为表达式结束符"#"
为叙述方便，将操作数和操作符均称为一个符号
**计算中缀表达式的过程如下，从左到右依次扫描计算表达式的每一个符号ch，
根据ch的值做如下处理：
（1）如果ch是操作数，则将它如操作数栈OPND,然后扫描下一个符号
（2）如果ch是操作符，则做如下处理：
	a.如果ch是表达式结束符“#”，则计算过程结束。操作数OPND顶的元素为表达式的值
	b.如果ch为右括号“)”,且操作符栈OPRT顶的元素为左括号“(”,则操作符栈OPRT栈顶元素出栈，
	然后扫描下一个符号
	c.如果ch的优先级大于操作符栈OPRT栈顶元素的优先级，则将它入操作符栈OPRT，
	然后继续扫描下一个符号
	d.如果ch的优先级小于或等于操作符栈OPRT栈顶元素的优先级，
	则从操作符栈OPRT栈顶出栈一个操作符,从操作数栈OPND栈顶出栈两个操作数，
	并利用出栈的操作符对两个操作数做计算，把计算结果入操作数栈OPND.
**计算后缀表达式时，与中缀表达式相反，无须考虑运算符的优先级，只需要从左到右按照表达式
出现的先后次序进行计算即可。
**计算后缀表达式时只需设置一个操作数栈OPND,初始时设置为空。
**计算后缀表达式的过程如下：从左到右扫描待计算表达式的每一个符号ch,根据ch的值做如下处理
	a.如果ch为表达式结束符“#”，则计算过程结束，操作数栈的栈顶元素就是表达式的值
	b.如果ch为操作数，则入操作数栈OPND，然后扫描下一个符号
	c.如果ch为操作符，则从操作数栈OPND出栈两个操作数，并用操作符ch对两个操作数做计算，
	把计算结果入操作数栈OPND,然后扫描下一个符号。
**关于利用栈对中缀表达式进行计算的程序，已经包含在ExpressionValue.c中
1.2递归实现
**递归的定义：如果一个对象的组成部分的定义与它本身相同，则该对象是递归的；如果一个过程执行时
直接或者间接地调用自己，则这个过程是递归的
**满足如下条件的问题可以用递归方法求解：
（1）该问题可以转化成一个或多个较简单的新问题，新问题与原问题的求解方法相同，只是规模不同
（2）有一个结束递归的条件，称为递归边界，不能出现无穷递归
采用递归调用的程序也可以转换为非递归调用的程序。转换的方法有两种：直接转换法和间接转换法。
直接转换法可以将递归调用转换为使用循环语句的递归调用；间接转换法需要设计一个栈来保存中间结果

