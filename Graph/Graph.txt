图
***************************图**************************
1.图的定义
	图可以用一个二元组G=<V,E>来表示，其中V是图的顶点的非空有限集，
E是图的边的集合，E的元素为连接V中两个结点的边，E是二元组的集合
E={<u,v>|u,v in V,u!=v}.如果<u,v>是图G的一条边，则称顶点u和v相邻，
并称顶点u和v与边<u,v>相关联。用记号||V||和||E||分别表示图G的顶点数
和边数。
	如果一个图满足以下条件：
	（1）不存在环，即不存在从一个顶点到自身的边
	（2）不存在多重边，任意两个顶点之间只有一条边
	则称该图为简单图。
**无向图&有向图
	如果图的边集E的元素<u,v>是无序的，则称图为无向图。如果图的边集E的元素
<u,v>是有序的，则称图为有向图。在有向图中，顶点u称为边<u,v>的起点，顶点v称为
边<u,v>的终点。
	给定图G,令n=||V||,e=||E||,n和e分别表示图G的顶点数和边数。对于无向图G,
如果任意两点之间都有边相连，图的边数达到最大值n(n-1)/2,则称图G为无向完全图。
对于有向图G，如果任意两点之间都有边相连，图的边数达到最大值n(n-1),则称图G为
有向完全图。
	给定一个具有n个顶点的无向图G,其边数取值为[0,n(n-1)/2]。同样的，给定一个具有
n个顶点的有向图G,其边数的取值为[0,n(n-1)]。
**边数很少的图称为稀疏图，边数较多的图称为稠密图。
**设有两个图G=<V,E>和G'=<V',E'>，如果有V'包含于V且E'包含于E,则称图G'是图G的子图。
**在图G中，与一个顶点v相关联的边数称为顶点v的度。对于有向图，以顶点v为起点的有向
边的条数称为顶点V的出度，以顶点v为终点的有向边的条数称为顶点的入度。有向图中顶点v
的度称为其出度和入度之和。
	关于顶点的度有以下性质成立：
	（1）图G中所有顶点的度之和等于边数之和的2倍
	（2）有向图G中所有顶点的出度之和等于所有顶点的入度之和，并且都等于图的边数。
	在实际应用中，常给图的边赋予一个值，称为边的权值。如果图的边带有权值，则被称为
带权图，否则称为非带权图。
2.图的连通性
	图G的一个顶点序列为(v0,v1,v2,...,vn),其中<v(k),v(k+1)>属于E,0<=k<=n-1,称为顶点v0到
vn的一条路径，v0到vn分别称为路径的起点和终点。路径所包含的边的数目称为路径长度。如果
路径中没有顶点重复出现，则称该路径为简单路径。如果路径的起点和终点相同，则称该路径为
回路。
	在无向图中，如果从顶点u到顶点v有一条路径，则称顶点u和v是连通的。如果无向图中任意
两个顶点是连通的，则称图为连通图，否则称之为非连通图。
	在有向图中，对于图中任意两个结点u和v，u!=v,若从u到v和从v到u都存在路径，则称图G是
强连通图。
	对于有向图中的任意两个顶点u和v,如果仅存在一条从u到v的有向路径，或者仅存在一条从v到
u的有向路径，则称为该有向图是单向连通的。
	如果不考虑有向图中边的方向，将其看做无向图是连通的，则称该有向图是弱连通的。
	根据有向图连通性的定义，如果有向图是强连通的，则必定是单向连通的；如果有向图是单连
通的，则必定是弱连通的。
	若一个无向图是连通图，且没有回路，则称该图为树，有n个结点的图如果是树，则该图中只有
n-1条边，在树中任意添加一条边都会构成回路。
	一个无向连接图G的生成树是图G的子图，该子图是树并且包含图G的所有顶点。一个无向图可能
包含多个生成树。
*******************************************************
3.图的存储结构
3.1 图的邻接矩阵表示法
	图的邻接矩阵表示用一个矩阵来存储图中顶点的邻接关系。对于一个有n个顶点的图，其邻接矩阵
是一个n行n列的矩阵。对于非带权图，其邻接矩阵为a,则a的元素为
	（1）a(i,j)=0,v(i)和v(j)不相邻接
	（2）a(i,j)=1,v(i)和v(j)相邻接
	对于带权图，其邻接矩阵为a,边<v(i),v(j)>的权值为w(i,j),则a的元素为：
	（1）a(i,j)=0,i=j
	（2）a(i,j)=inf,v(i)和v(j)不相邻接
	（3）a(i,j)=w(i,j),v(i)和v(j)相邻接
**无向图的邻接矩阵是一个对称矩阵，在无向图的邻接矩阵中，第行的1元素的个数就是顶点v(i)的度。
**有向图的邻接矩阵不一定是一个对称矩阵。在有向图的邻接矩阵中，第i行1元素的个数是顶点v(i)的
出度，第i列1元素的个数就是顶点v(i)的入度。
3.2 图的邻接表表示法
	为了提高空间利用效率，可以用链式存储结构来表示图。用一个单链表来存储一个顶点的所有邻接点，
链表的表头结点对应顶点v,链表中的每个结点对应顶点v的一个邻接点。在无向图的邻接表表示中，以某个
顶点为表头结点的链表的长度就是该顶点的度。
	在有向图的邻接表表示中，顶点v对应的单链表中存储所有以v为起点的边的终点。在有向图的邻接表
表示中，以某个顶点为表头顶点的链表的长度就是顶点的出度。
	对于有n个顶点、e条边的无向图而言，其邻接表表示需要n+2e个链表结点。而对于有n个顶点、e条边的
有向图而言，其邻接表表示需要n+e个链表结点。
*******************************************************
4.图的遍历
4.1深度优先遍历
	深度优先遍历类似一种试探性的遍历，类似于试探性的走迷宫，具体步骤如下：
	从图的任一顶点V1开始，访问V1,然后访问v1的一个邻接点V2,然后访问V2的一个邻接点V3,一直到顶点
V(k),直到Vk的所有邻接点都已经被访问，此时回退一步，访问V(k-1),直到访问完V(k-1)的所有邻接点，继续回退，依次类推，直到V1的所有邻接点已经被访问完。
	访问的顺序为V1,V2,V3,...,Vk,然后回退访问，依次为Vk,V(k-1),...,V2,V1.与符合栈的结构特性
4.2广度优先遍历	
	图的广度优先遍历比较容易理解，具体步骤如下：
	从图的任一顶点u出发，访问顶点u,并记录顶点u所有还未访问的邻接顶点的序列V1,V2,...,Vk，然后
依次从该序列中取出顶点并访问，从而形成一个顶点的访问序列V1,V2,...,V(-1),Vk,再将取出顶点的未访
问的邻接顶点加入到该序列中，直到该序列中没有顶点为止。
	顶点的记录序列V1,V2,...,Vk和顶点的访问序列V1,V2,...,Vk顺序相同，具有队列的结构特征。
*******************************************************
5.最小生成树
	一个具有n个顶点的连通图的生成树是指包含其全部n个顶点，且只有n-1条边的连通子图。对于具有n个
顶点的连通图，要保证其有n个顶点的子图的连通性，最少需要n-1条边。
5.1普里姆算法
（1）顶点到顶点的最短边：一个顶点到一个顶点集合的最短边是指从该顶点到集合中所有顶点的边中，权值
最小的一条边。
（2）集合到集合的最短边：给定顶点集合A和顶点集合B,集合A中的每一个顶点到集合B都有一个最短边，这些
最短边的最小值称为集合A到集合B的最短边。
（3）普里姆(Prim)算法
	要构造图G的生成树，需要设置两个集合：生成树集合U和剩余顶点集合V。初始时U为空，V为图G中所有
顶点。
	普里姆算法的过程如下：
	a)从V中任选一个顶点V0加入集合U,并从V中去掉顶点V0。
	b)求从集合V中的每一个顶点到集合U的最短边
	c)求从集合V到U的最短边<v,u>,v属于V,u属于U.
	d)将最短边<v,u>及顶点v加入到集合U中，并从集合V中去掉顶点v。
	e)重复步骤b)到d)，直到U中包含了图G的所有顶点。此时，U包含了图G最小生成树的所有顶点和边。
5.2克鲁斯卡尔(Kruskal)算法
	克鲁斯卡尔算法过程如下：
	（1）对图中所有边的按权值升序排序，并令MST为空。
	（2）从边集合中取出权值最小的一条边e,如果e不会与MST中的边构成回路，则将e加入MST,否则舍弃该边。
	（3）重复执行步骤（2），直到MST中已经包含n-1条边。
*******************************************************
6.最短路径算法
6.1单源最短路径
	单源最短路径问题：给定一个顶点u,称为源点，需要从v出发到图中所有其他顶点的最短路径。
	可以将从一个顶点u到一个顶点w的最短路径看成一棵树，顶点u是根结点，其他顶点是树的全部叶子结点，
从根结点到叶子结点的路径就是它们之间的最短路径，这棵树称为最短路径树。
	Dijkstra算法的基本过程如下：
	（1）初始化，U={u}，V包含图中其他顶点
	（2）设置从源点u到集合V中所有顶点V的最短距离，其值等于边(u,v)的权值
	（3）找出从源点到集合V中距离最短的顶点W,将顶点w加入集合U中。
	（4）更新从源点u到集合V中的所有顶点v的最短距离，计算公式如下：
			d(u,v)=old(u,v),如果old(u,v)<d(u,w)+d(w,v)
			d(u,v)=d(u,w)+d(w,v),如果old(u,v)>=d(u,w)+d(w,v)
	（5）重复步骤（3）和步骤（4），直到集合V为空。
6.2全源最短路径
	弗洛伊德(floyd)算法。该算法的基本思路如下：
	集合Set为顶点集合，用dist(i,j)表示从v(i)经过集合Set中的顶点到v(j)的最短距离。初始时集合Set为
空集，dist(i,j)表示从v(i)到v(j)的边的长度。先向集合中添加一个顶点v(1),dist(i,j)变为从v(i)经过v(1)
到v(j)的最短距离。再向集合Set中添加一个顶点v(2),dist(i,j)变成从v(i)经过v(1),v(2)到v(j)的最短距离,...,依次进行，知道所有的顶点都已经添加到集合Set中，即可求得从v(i)到v(j)的最短距离。
*******************************************************
7.有向无环图
7.1 概念
	在有向图中，有向环(回路)是指从一个顶点出发又回到该顶点的有向路径。一个没有有向环的有向图称为
有向无环图。
	常用有向无环图来描述一项工程的完成过程。将一项工程分解为若干个子项目，当所有项目都完成后就完成
了该工程，子项目之间存在先后顺序，前面的子项目完成后才能开始后面的子项目。我们关注的是，整个项目能否顺利完成，以及完成整个项目的最短时间。
	使用有向图描述工程，用图中的点代表工程的子项目，用图中的有向边表示子项目之间的先后顺序。这样的
图称为顶点活动(activity on vertices，AOV)网。如果对AOV网进行拓扑排序时能够得到一个顶点的线性序列，
则它对应的工程能够顺利完成，反之则不能。
	用有向无环图描述工程时还可以用边代表子项目，边上的权表示子项目需要的时间。也就是说，用边表示活
动，边上的权表示活动的持续时间，这样的有向图称为边活动(activity on edges,AOE)网。求完成整个工程的
最短时间就是求AOE网的关键路径
7.2 拓扑排序，求AOV网
	在有向无环图中，至少有一个入度为0的顶点和一个出度为0的顶点，入度为0的顶点称为源点，出度为0的顶
点称为汇点。
	拓扑排序的过程如下：
	（1）选择图中任一源点，输出该顶点
	（2）在图中删除该顶点及以它为起点的边
	（3）重复步骤（1）和步骤（2），知道图中的全部顶点已经输出。
	有向图有多个源点时，可以从任一源点开始，故拓扑排序得到的序列不唯一。
	拓扑排序的作用：检测有向图中是否存在环。如果在排序的过程中，发现源点队列为空，但是图中还有顶点
则表明图中的每个顶点的都有入边，故一定存在环。
	代表一个工程的有向图中如果存在环，则说明该工程的子项目互为前提，则该工程无法完成。
7.3 AOE网求关键路径
	在AOE网中，从源点到汇点路径最长的路径称为AOE关键路径。完成整个工程的最短时间等于完成关键路径上
的子项目所需要的时间。关键路径上的活动都是关键活动，关键活动必须按时完成，不能拖延，否则将导致整个项目延期。
	为了介绍找到关键路径的算法，需要定义以下几个变量：
	ve(i):事件v(i)最早可能发生的时间，即从源点v(1)到顶点v(i)的最长路径长度。
	vl(i):事件v(i)最迟允许发生的时间，即保证v(n)在ve(n)时刻发生，事件v(i)最迟允许发生的时间，超过
该时间就不能保证汇点事件按时完成，它等于ve(n)减去从v(i)到v(n)的最长路径长度。
	e(k):活动a(k)=<v(i),v(j)>最早可能开始的时间，等于事件v(i)最早可能发生的时间ve(i)
	l(k):活动a(k)=<v(i),v(j)>最迟允许完成的时间，等于事件v(j)最迟完成时间vl(i)。
	l(k)-e(k)是活动的a(k)最多可以利用的时间，如果一个活动的最大可利用时间等于其对应边a(k)
的权，则该活动为关键活动。该活动必须在e(k)时间立即开始，不能耽误，才能保证汇点时间按时完成，
否则导致整个工程延期。如果一个活动的最大可利用时间大于其对应边a(k)的权，则该活动不是关键活动。他
可以延期进行，只要完成时间不超过l(k),整个工程仍能够如期完成。
	设a(k)=<v(i),v(j)>的权为w(k)=w(i,j),求关键路径的步骤如下：
	（1）求所有事件的最早可能发生的时间
		所有事件的最早可能发生的时间可以从源点v(1)以递推方式进行，因为v(1)为源点，所以ve(1)=0。
	事件v(j)的最早可能发生的时间为：
			ve(j)=max(ve(i)+w(i,j)),q其中<v(i),v(j)>属于S，S为v(j)的入边集合。
	（2）求所有事件的最迟允许发生的时间
		求所有事件的最迟允许发生时间可以从汇点v(n)开始向后以递推方式进行，因为v(n)是汇点，故它的最迟允许发生时间为ve(n),事件v(i)的最迟允许发生时间为：
			vl(j)=max(vl(i)+w(i,j)),其中<v(i),v(j)>属于S,其中S是v(i)的出边集合
	（3）求所有活动的最早可能开始的时间和最迟允许完成的时间
	（4）求所有活动最多可以利用的时间
	
